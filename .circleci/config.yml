version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          mentions: darren.foley
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          mentions: darren.foley
          template: basic_fail_1

  test-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Run Frontend Tests
          command: |
              cd frontend
              npm install
              npm run test
      - slack/notify:
          event: fail
          mentions: darren.foley
          template: basic_fail_1
                
  test-backend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Run Backend Tests
          command: |
              cd backend
              npm install
              npm run test
      - slack/notify:
          event: fail
          mentions: darren.foley
          template: basic_fail_1

  scan-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Run frontend scan job check for security vulnerabilities
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          mentions: darren.foley
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Run frontend scan job check for security vulnerabilities
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          mentions: darren.foley
          template: basic_fail_1
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
              yum install tar gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
              IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
              echo ${IP} >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_environment

  configure-infrastructure:
    docker:
      - image: amazon/aws-cli 
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["f9:9f:a0:97:e6:64:85:00:8b:78:46:3b:82:f1:f3:99"]
      - run:
          name: Install tar, wget gzip and python 3
          command: |
           yum install tar gzip -y
           yum install python3 py3-pip -y
           yum install wget -y
      - run:
          name: Install Ansible
          command: |
            wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            yum install epel-release-latest-7.noarch.rpm -y
            yum update -y
            yum install ansible -y
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy_environment

  run-migrations:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install node and npm
          command: |
                yum install -y gcc-c++ make 
                curl -sL https://rpm.nodesource.com/setup_14.x | bash -
                yum install -y nodejs
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to SSM Parameter Store
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt; then
              echo "Sending parameter to SSM"
              aws ssm put-parameter --name "/Migration/status" --value "1" --type "String" --overwrite
            else
              echo "Something went wrong"
            fi
      - destroy_environment

  deploy-frontend:
    docker:
      - image: amazon/aws-cli 
    steps:
      - checkout
      - run:
          name: Install tar, wget, curl, gzip and python 3
          command: |
           yum install tar gzip curl -y
           yum install python3 py3-pip -y
           yum install wget -y
      - run:
          name: Install Ansible
          command: |
            wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            yum install epel-release-latest-7.noarch.rpm -y
            yum update -y
            yum install ansible -y
      - run:
          name: Install node and npm
          command: |
                yum install -y gcc-c++ make 
                curl -sL https://rpm.nodesource.com/setup_14.x | bash -
                yum install -y nodejs
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            #aws s3 cp dist s3://udapeople-ce4937b --recursive
      - destroy_environment  

  deploy-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["f9:9f:a0:97:e6:64:85:00:8b:78:46:3b:82:f1:f3:99"]
      - run:
          name: Install tar, wget gzip and python 3
          command: |
           yum install tar gzip -y
           yum install python3 py3-pip -y
           yum install wget -y
      - run:
          name: Install Ansible
          command: |
            wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            yum install epel-release-latest-7.noarch.rpm -y
            yum update -y
            yum install ansible -y
      - run:
          name: Install node and npm
          command: |
                yum install -y gcc-c++ make 
                curl -sL https://rpm.nodesource.com/setup_14.x | bash -
                yum install -y nodejs
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -czvf artifact.tar.gz backend
            pwd
            # cp artifact.tar.gz ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy_environment
       
  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: Install node and npm
          command: |
                yum install -y gcc-c++ make 
                curl -sL https://rpm.nodesource.com/setup_14.x | bash -
                yum install -y nodejs
      - run:
          name: Install tar, wget gzip and python 3
          command: |
           yum install tar gzip -y
           yum install python3 py3-pip -y
           yum install wget -y
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url and run smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      - destroy_environment

workflows:
  # TestWorkflow:
  #   jobs:
  #     - smoke-test:
  #         filters:
  #           branches:
  #             only: [fb-smoke-test]
  

  MainWorkflow:
    jobs:
      - build-frontend:
            filters:
              branches:
                only: master
            context: Slack_Container_Context
      - build-backend:
            filters:
              branches:
                only: master
            context: Slack_Container_Context
      - test-frontend:
            requires: [build-frontend]
            filters:
              branches:
                only: master
            context: Slack_Container_Context
      - test-backend:
            requires: [build-backend]
            filters:
              branches:
                only: master
            context: Slack_Container_Context
      - scan-frontend:
            requires: [build-frontend]
            filters:
              branches:
                only: master
            context: Slack_Container_Context
      - scan-backend:
            requires: [build-backend]
            filters:
              branches:
                only: master
            context: Slack_Container_Context
      - deploy-infrastructure:
            requires: [test-frontend, test-backend, scan-frontend, scan-backend]
            filters:
              branches:
                only: master
      - configure-infrastructure:
            requires: [deploy-infrastructure]
            filters:
              branches:
                only: master
      - run-migrations:
            requires: [configure-infrastructure]
            filters:
              branches:
                only: master
      - deploy-frontend:
            requires: [run-migrations]
            filters:
              branches:
                only: master
      - deploy-backend:
            requires: [run-migrations]
            filters:
              branches:
                only: master
      - smoke-test:
            requires: [deploy-backend, deploy-frontend]
            filters:
                branches:
                  only: master